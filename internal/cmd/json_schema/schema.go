package main

// Code generated by 'go run ../internal/cmd/json_schema'. DO NOT EDIT.

type Schema struct {
	AdditionalItems      *Schema             `json:"additionalItems,omitempty"`
	AdditionalProperties *Schema             `json:"additionalProperties,omitempty"`
	AllOf                []*Schema           `json:"allOf,omitempty"`
	AnyOf                []*Schema           `json:"anyOf,omitempty"`
	Default              interface{}         `json:"default,omitempty"`
	Definitions          map[string]*Schema  `json:"definitions,omitempty"`
	Dependencies         map[string][]string `json:"dependencies,omitempty"`
	Description          string              `json:"description,omitempty"`
	Enum                 []string            `json:"enum,omitempty"`
	ExclusiveMaximum     bool                `json:"exclusiveMaximum,omitempty"`
	ExclusiveMinimum     bool                `json:"exclusiveMinimum,omitempty"`
	Format               string              `json:"format,omitempty"`
	Id                   string              `json:"id,omitempty"`
	Items                *Schema             `json:"items,omitempty"`
	MaxItems             int                 `json:"maxItems,omitempty"`
	MaxLength            int                 `json:"maxLength,omitempty"`
	MaxProperties        int                 `json:"maxProperties,omitempty"`
	Maximum              float64             `json:"maximum,omitempty"`
	MinItems             int                 `json:"minItems,omitempty"`
	MinLength            int                 `json:"minLength,omitempty"`
	MinProperties        int                 `json:"minProperties,omitempty"`
	Minimum              float64             `json:"minimum,omitempty"`
	MultipleOf           float64             `json:"multipleOf,omitempty"`
	Not                  *Schema             `json:"not,omitempty"`
	OneOf                []*Schema           `json:"oneOf,omitempty"`
	Pattern              string              `json:"pattern,omitempty"`
	PatternProperties    map[string]*Schema  `json:"patternProperties,omitempty"`
	Properties           map[string]*Schema  `json:"properties,omitempty"`
	Ref                  string              `json:"$ref,omitempty"`
	Required             []string            `json:"required,omitempty"`
	Schema               string              `json:"$schema,omitempty"`
	Title                string              `json:"title,omitempty"`
	Type                 Schema_Type         `json:"type,omitempty"`
	UniqueItems          bool                `json:"uniqueItems,omitempty"`
}

type SimpleTypes string

const SimpleTypes_Array SimpleTypes = "array"
const SimpleTypes_Boolean SimpleTypes = "boolean"
const SimpleTypes_Integer SimpleTypes = "integer"
const SimpleTypes_Null SimpleTypes = "null"
const SimpleTypes_Number SimpleTypes = "number"
const SimpleTypes_Object SimpleTypes = "object"
const SimpleTypes_String SimpleTypes = "string"
