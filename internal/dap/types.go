package dap

// Code generated by 'go run ../internal/cmd/gendap'. DO NOT EDIT.

import "fmt"

type (
	RequestArguments interface{ requestType() string }
	ResponseBody     interface{ responseType() string }
	EventBody        interface{ eventType() string }
)

func (*AttachRequestArguments) requestType() string             { return "attach" }
func (*BreakpointLocationsArguments) requestType() string       { return "breakpointLocations" }
func (*CancelArguments) requestType() string                    { return "cancel" }
func (*CompletionsArguments) requestType() string               { return "completions" }
func (*ConfigurationDoneArguments) requestType() string         { return "configurationDone" }
func (*ContinueArguments) requestType() string                  { return "continue" }
func (*DataBreakpointInfoArguments) requestType() string        { return "dataBreakpointInfo" }
func (*DisassembleArguments) requestType() string               { return "disassemble" }
func (*DisconnectArguments) requestType() string                { return "disconnect" }
func (*EvaluateArguments) requestType() string                  { return "evaluate" }
func (*ExceptionInfoArguments) requestType() string             { return "exceptionInfo" }
func (*GotoArguments) requestType() string                      { return "goto" }
func (*GotoTargetsArguments) requestType() string               { return "gotoTargets" }
func (*InitializeRequestArguments) requestType() string         { return "initialize" }
func (*LaunchRequestArguments) requestType() string             { return "launch" }
func (*LoadedSourcesArguments) requestType() string             { return "loadedSources" }
func (*ModulesArguments) requestType() string                   { return "modules" }
func (*NextArguments) requestType() string                      { return "next" }
func (*PauseArguments) requestType() string                     { return "pause" }
func (*ReadMemoryArguments) requestType() string                { return "readMemory" }
func (*RestartArguments) requestType() string                   { return "restart" }
func (*RestartFrameArguments) requestType() string              { return "restartFrame" }
func (*ReverseContinueArguments) requestType() string           { return "reverseContinue" }
func (*RunInTerminalRequestArguments) requestType() string      { return "runInTerminal" }
func (*ScopesArguments) requestType() string                    { return "scopes" }
func (*SetBreakpointsArguments) requestType() string            { return "setBreakpoints" }
func (*SetDataBreakpointsArguments) requestType() string        { return "setDataBreakpoints" }
func (*SetExceptionBreakpointsArguments) requestType() string   { return "setExceptionBreakpoints" }
func (*SetExpressionArguments) requestType() string             { return "setExpression" }
func (*SetFunctionBreakpointsArguments) requestType() string    { return "setFunctionBreakpoints" }
func (*SetInstructionBreakpointsArguments) requestType() string { return "setInstructionBreakpoints" }
func (*SetVariableArguments) requestType() string               { return "setVariable" }
func (*SourceArguments) requestType() string                    { return "source" }
func (*StackTraceArguments) requestType() string                { return "stackTrace" }
func (*StepBackArguments) requestType() string                  { return "stepBack" }
func (*StepInArguments) requestType() string                    { return "stepIn" }
func (*StepInTargetsArguments) requestType() string             { return "stepInTargets" }
func (*StepOutArguments) requestType() string                   { return "stepOut" }
func (*TerminateArguments) requestType() string                 { return "terminate" }
func (*TerminateThreadsArguments) requestType() string          { return "terminateThreads" }
func (*ThreadsArguments) requestType() string                   { return "threads" }
func (*VariablesArguments) requestType() string                 { return "variables" }
func (*WriteMemoryArguments) requestType() string               { return "writeMemory" }

func (*AttachResponseBody) responseType() string                  { return "attach" }
func (*BreakpointLocationsResponseBody) responseType() string     { return "breakpointLocations" }
func (*CancelResponseBody) responseType() string                  { return "cancel" }
func (*Capabilities) responseType() string                        { return "initialize" }
func (*CompletionsResponseBody) responseType() string             { return "completions" }
func (*ConfigurationDoneResponseBody) responseType() string       { return "configurationDone" }
func (*ContinueResponseBody) responseType() string                { return "continue" }
func (*DataBreakpointInfoResponseBody) responseType() string      { return "dataBreakpointInfo" }
func (*DisassembleResponseBody) responseType() string             { return "disassemble" }
func (*DisconnectResponseBody) responseType() string              { return "disconnect" }
func (*ErrorResponseBody) responseType() string                   { return "error" }
func (*EvaluateResponseBody) responseType() string                { return "evaluate" }
func (*ExceptionInfoResponseBody) responseType() string           { return "exceptionInfo" }
func (*GotoResponseBody) responseType() string                    { return "goto" }
func (*GotoTargetsResponseBody) responseType() string             { return "gotoTargets" }
func (*LaunchResponseBody) responseType() string                  { return "launch" }
func (*LoadedSourcesResponseBody) responseType() string           { return "loadedSources" }
func (*ModulesResponseBody) responseType() string                 { return "modules" }
func (*NextResponseBody) responseType() string                    { return "next" }
func (*PauseResponseBody) responseType() string                   { return "pause" }
func (*ReadMemoryResponseBody) responseType() string              { return "readMemory" }
func (*RestartFrameResponseBody) responseType() string            { return "restartFrame" }
func (*RestartResponseBody) responseType() string                 { return "restart" }
func (*ReverseContinueResponseBody) responseType() string         { return "reverseContinue" }
func (*RunInTerminalResponseBody) responseType() string           { return "runInTerminal" }
func (*ScopesResponseBody) responseType() string                  { return "scopes" }
func (*SetBreakpointsResponseBody) responseType() string          { return "setBreakpoints" }
func (*SetDataBreakpointsResponseBody) responseType() string      { return "setDataBreakpoints" }
func (*SetExceptionBreakpointsResponseBody) responseType() string { return "setExceptionBreakpoints" }
func (*SetExpressionResponseBody) responseType() string           { return "setExpression" }
func (*SetFunctionBreakpointsResponseBody) responseType() string  { return "setFunctionBreakpoints" }
func (*SetInstructionBreakpointsResponseBody) responseType() string {
	return "setInstructionBreakpoints"
}
func (*SetVariableResponseBody) responseType() string      { return "setVariable" }
func (*SourceResponseBody) responseType() string           { return "source" }
func (*StackTraceResponseBody) responseType() string       { return "stackTrace" }
func (*StepBackResponseBody) responseType() string         { return "stepBack" }
func (*StepInResponseBody) responseType() string           { return "stepIn" }
func (*StepInTargetsResponseBody) responseType() string    { return "stepInTargets" }
func (*StepOutResponseBody) responseType() string          { return "stepOut" }
func (*TerminateResponseBody) responseType() string        { return "terminate" }
func (*TerminateThreadsResponseBody) responseType() string { return "terminateThreads" }
func (*ThreadsResponseBody) responseType() string          { return "threads" }
func (*VariablesResponseBody) responseType() string        { return "variables" }
func (*WriteMemoryResponseBody) responseType() string      { return "writeMemory" }

func (*BreakpointEventBody) eventType() string     { return "breakpoint" }
func (*CapabilitiesEventBody) eventType() string   { return "capabilities" }
func (*ContinuedEventBody) eventType() string      { return "continued" }
func (*ExitedEventBody) eventType() string         { return "exited" }
func (*InitializedEventBody) eventType() string    { return "initialized" }
func (*InvalidatedEventBody) eventType() string    { return "invalidated" }
func (*LoadedSourceEventBody) eventType() string   { return "loadedSource" }
func (*ModuleEventBody) eventType() string         { return "module" }
func (*OutputEventBody) eventType() string         { return "output" }
func (*ProcessEventBody) eventType() string        { return "process" }
func (*ProgressEndEventBody) eventType() string    { return "progressEnd" }
func (*ProgressStartEventBody) eventType() string  { return "progressStart" }
func (*ProgressUpdateEventBody) eventType() string { return "progressUpdate" }
func (*StoppedEventBody) eventType() string        { return "stopped" }
func (*TerminatedEventBody) eventType() string     { return "terminated" }
func (*ThreadEventBody) eventType() string         { return "thread" }

type (
	AttachResponseBody                  struct{}
	CancelResponseBody                  struct{}
	ConfigurationDoneResponseBody       struct{}
	DisconnectResponseBody              struct{}
	GotoResponseBody                    struct{}
	InitializedEventBody                struct{}
	LaunchResponseBody                  struct{}
	NextResponseBody                    struct{}
	PauseResponseBody                   struct{}
	RestartFrameResponseBody            struct{}
	RestartResponseBody                 struct{}
	ReverseContinueResponseBody         struct{}
	SetExceptionBreakpointsResponseBody struct{}
	StepBackResponseBody                struct{}
	StepInResponseBody                  struct{}
	StepOutResponseBody                 struct{}
	TerminateResponseBody               struct{}
	TerminateThreadsResponseBody        struct{}
	ThreadsArguments                    struct{}
	WriteMemoryResponseBody             struct{}
)

func newRequest(x string) (RequestArguments, error) {
	switch x {
	case "attach":
		return new(AttachRequestArguments), nil
	case "breakpointLocations":
		return new(BreakpointLocationsArguments), nil
	case "cancel":
		return new(CancelArguments), nil
	case "completions":
		return new(CompletionsArguments), nil
	case "configurationDone":
		return new(ConfigurationDoneArguments), nil
	case "continue":
		return new(ContinueArguments), nil
	case "dataBreakpointInfo":
		return new(DataBreakpointInfoArguments), nil
	case "disassemble":
		return new(DisassembleArguments), nil
	case "disconnect":
		return new(DisconnectArguments), nil
	case "evaluate":
		return new(EvaluateArguments), nil
	case "exceptionInfo":
		return new(ExceptionInfoArguments), nil
	case "goto":
		return new(GotoArguments), nil
	case "gotoTargets":
		return new(GotoTargetsArguments), nil
	case "initialize":
		return new(InitializeRequestArguments), nil
	case "launch":
		return new(LaunchRequestArguments), nil
	case "loadedSources":
		return new(LoadedSourcesArguments), nil
	case "modules":
		return new(ModulesArguments), nil
	case "next":
		return new(NextArguments), nil
	case "pause":
		return new(PauseArguments), nil
	case "readMemory":
		return new(ReadMemoryArguments), nil
	case "restart":
		return new(RestartArguments), nil
	case "restartFrame":
		return new(RestartFrameArguments), nil
	case "reverseContinue":
		return new(ReverseContinueArguments), nil
	case "runInTerminal":
		return new(RunInTerminalRequestArguments), nil
	case "scopes":
		return new(ScopesArguments), nil
	case "setBreakpoints":
		return new(SetBreakpointsArguments), nil
	case "setDataBreakpoints":
		return new(SetDataBreakpointsArguments), nil
	case "setExceptionBreakpoints":
		return new(SetExceptionBreakpointsArguments), nil
	case "setExpression":
		return new(SetExpressionArguments), nil
	case "setFunctionBreakpoints":
		return new(SetFunctionBreakpointsArguments), nil
	case "setInstructionBreakpoints":
		return new(SetInstructionBreakpointsArguments), nil
	case "setVariable":
		return new(SetVariableArguments), nil
	case "source":
		return new(SourceArguments), nil
	case "stackTrace":
		return new(StackTraceArguments), nil
	case "stepBack":
		return new(StepBackArguments), nil
	case "stepIn":
		return new(StepInArguments), nil
	case "stepInTargets":
		return new(StepInTargetsArguments), nil
	case "stepOut":
		return new(StepOutArguments), nil
	case "terminate":
		return new(TerminateArguments), nil
	case "terminateThreads":
		return new(TerminateThreadsArguments), nil
	case "threads":
		return new(ThreadsArguments), nil
	case "variables":
		return new(VariablesArguments), nil
	case "writeMemory":
		return new(WriteMemoryArguments), nil
	default:
		return nil, fmt.Errorf("unrecognized command %q", x)
	}
}

func newResponse(x string) (ResponseBody, error) {
	switch x {
	case "attach":
		return new(AttachResponseBody), nil
	case "breakpointLocations":
		return new(BreakpointLocationsResponseBody), nil
	case "cancel":
		return new(CancelResponseBody), nil
	case "initialize":
		return new(Capabilities), nil
	case "completions":
		return new(CompletionsResponseBody), nil
	case "configurationDone":
		return new(ConfigurationDoneResponseBody), nil
	case "continue":
		return new(ContinueResponseBody), nil
	case "dataBreakpointInfo":
		return new(DataBreakpointInfoResponseBody), nil
	case "disassemble":
		return new(DisassembleResponseBody), nil
	case "disconnect":
		return new(DisconnectResponseBody), nil
	case "error":
		return new(ErrorResponseBody), nil
	case "evaluate":
		return new(EvaluateResponseBody), nil
	case "exceptionInfo":
		return new(ExceptionInfoResponseBody), nil
	case "goto":
		return new(GotoResponseBody), nil
	case "gotoTargets":
		return new(GotoTargetsResponseBody), nil
	case "launch":
		return new(LaunchResponseBody), nil
	case "loadedSources":
		return new(LoadedSourcesResponseBody), nil
	case "modules":
		return new(ModulesResponseBody), nil
	case "next":
		return new(NextResponseBody), nil
	case "pause":
		return new(PauseResponseBody), nil
	case "readMemory":
		return new(ReadMemoryResponseBody), nil
	case "restartFrame":
		return new(RestartFrameResponseBody), nil
	case "restart":
		return new(RestartResponseBody), nil
	case "reverseContinue":
		return new(ReverseContinueResponseBody), nil
	case "runInTerminal":
		return new(RunInTerminalResponseBody), nil
	case "scopes":
		return new(ScopesResponseBody), nil
	case "setBreakpoints":
		return new(SetBreakpointsResponseBody), nil
	case "setDataBreakpoints":
		return new(SetDataBreakpointsResponseBody), nil
	case "setExceptionBreakpoints":
		return new(SetExceptionBreakpointsResponseBody), nil
	case "setExpression":
		return new(SetExpressionResponseBody), nil
	case "setFunctionBreakpoints":
		return new(SetFunctionBreakpointsResponseBody), nil
	case "setInstructionBreakpoints":
		return new(SetInstructionBreakpointsResponseBody), nil
	case "setVariable":
		return new(SetVariableResponseBody), nil
	case "source":
		return new(SourceResponseBody), nil
	case "stackTrace":
		return new(StackTraceResponseBody), nil
	case "stepBack":
		return new(StepBackResponseBody), nil
	case "stepIn":
		return new(StepInResponseBody), nil
	case "stepInTargets":
		return new(StepInTargetsResponseBody), nil
	case "stepOut":
		return new(StepOutResponseBody), nil
	case "terminate":
		return new(TerminateResponseBody), nil
	case "terminateThreads":
		return new(TerminateThreadsResponseBody), nil
	case "threads":
		return new(ThreadsResponseBody), nil
	case "variables":
		return new(VariablesResponseBody), nil
	case "writeMemory":
		return new(WriteMemoryResponseBody), nil
	default:
		return nil, fmt.Errorf("unrecognized command %q", x)
	}
}

func newEvent(x string) (EventBody, error) {
	switch x {
	case "breakpoint":
		return new(BreakpointEventBody), nil
	case "capabilities":
		return new(CapabilitiesEventBody), nil
	case "continued":
		return new(ContinuedEventBody), nil
	case "exited":
		return new(ExitedEventBody), nil
	case "initialized":
		return new(InitializedEventBody), nil
	case "invalidated":
		return new(InvalidatedEventBody), nil
	case "loadedSource":
		return new(LoadedSourceEventBody), nil
	case "module":
		return new(ModuleEventBody), nil
	case "output":
		return new(OutputEventBody), nil
	case "process":
		return new(ProcessEventBody), nil
	case "progressEnd":
		return new(ProgressEndEventBody), nil
	case "progressStart":
		return new(ProgressStartEventBody), nil
	case "progressUpdate":
		return new(ProgressUpdateEventBody), nil
	case "stopped":
		return new(StoppedEventBody), nil
	case "terminated":
		return new(TerminatedEventBody), nil
	case "thread":
		return new(ThreadEventBody), nil
	default:
		return nil, fmt.Errorf("unrecognized event %q", x)
	}
}
