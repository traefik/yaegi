package dap

// Code generated by 'go run ../internal/cmd/genschema'. DO NOT EDIT.

type ProtocolMessageType string

const (
	ProtocolMessageType_Request  ProtocolMessageType = "request"
	ProtocolMessageType_Response ProtocolMessageType = "response"
	ProtocolMessageType_Event    ProtocolMessageType = "event"
)

type ProtocolMessage struct {
	Seq  int                 `json:"seq"`
	Type ProtocolMessageType `json:"type"`
}

type Request struct {
	ProtocolMessage
	Command   string           `json:"command"`
	Arguments RequestArguments `json:"arguments,omitempty"`
}

type AttachRequestArguments struct {
	Restart interface{} `json:"__restart,omitempty"`
}

type String string

func (v *String) Eq(u string) bool { return v != nil && string(*v) == u }
func (v *String) Get() string      { return string(*v) }
func (v *String) GetOr(u string) string {
	if v == nil {
		return u
	} else {
		return string(*v)
	}
}

type Response struct {
	ProtocolMessage
	Command    string       `json:"command"`
	Body       ResponseBody `json:"body,omitempty"`
	Message    *String      `json:"message,omitempty"`
	RequestSeq int          `json:"request_seq"`
	Success    bool         `json:"success"`
}

type SourcePresentationHint string

const (
	SourcePresentationHint_Normal      SourcePresentationHint = "normal"
	SourcePresentationHint_Emphasize   SourcePresentationHint = "emphasize"
	SourcePresentationHint_Deemphasize SourcePresentationHint = "deemphasize"
)

type Integer int

func (v *Integer) Eq(u int) bool { return v != nil && int(*v) == u }
func (v *Integer) Get() int      { return int(*v) }
func (v *Integer) GetOr(u int) int {
	if v == nil {
		return u
	} else {
		return int(*v)
	}
}

type ChecksumAlgorithm string

const (
	ChecksumAlgorithm_MD5       ChecksumAlgorithm = "MD5"
	ChecksumAlgorithm_SHA1      ChecksumAlgorithm = "SHA1"
	ChecksumAlgorithm_SHA256    ChecksumAlgorithm = "SHA256"
	ChecksumAlgorithm_Timestamp ChecksumAlgorithm = "timestamp"
)

type Checksum struct {
	Algorithm ChecksumAlgorithm `json:"algorithm"`
	Checksum  string            `json:"checksum"`
}

type Source struct {
	AdapterData      interface{} `json:"adapterData,omitempty"`
	Checksums        []*Checksum `json:"checksums,omitempty"`
	Name             *String     `json:"name,omitempty"`
	Origin           *String     `json:"origin,omitempty"`
	Path             *String     `json:"path,omitempty"`
	PresentationHint *String     `json:"presentationHint,omitempty"`
	SourceReference  *Integer    `json:"sourceReference,omitempty"`
	Sources          []*Source   `json:"sources,omitempty"`
}

type Breakpoint struct {
	Column               *Integer `json:"column,omitempty"`
	EndColumn            *Integer `json:"endColumn,omitempty"`
	EndLine              *Integer `json:"endLine,omitempty"`
	Id                   *Integer `json:"id,omitempty"`
	InstructionReference *String  `json:"instructionReference,omitempty"`
	Line                 *Integer `json:"line,omitempty"`
	Message              *String  `json:"message,omitempty"`
	Offset               *Integer `json:"offset,omitempty"`
	Source               *Source  `json:"source,omitempty"`
	Verified             bool     `json:"verified"`
}

type Event struct {
	ProtocolMessage
	Event string    `json:"event"`
	Body  EventBody `json:"body,omitempty"`
}

type BreakpointEventBody struct {
	Breakpoint Breakpoint `json:"breakpoint"`
	Reason     string     `json:"reason"`
}

type BreakpointLocation struct {
	Column    *Integer `json:"column,omitempty"`
	EndColumn *Integer `json:"endColumn,omitempty"`
	EndLine   *Integer `json:"endLine,omitempty"`
	Line      int      `json:"line"`
}

type BreakpointLocationsArguments struct {
	Column    *Integer `json:"column,omitempty"`
	EndColumn *Integer `json:"endColumn,omitempty"`
	EndLine   *Integer `json:"endLine,omitempty"`
	Line      int      `json:"line"`
	Source    Source   `json:"source"`
}

type BreakpointLocationsResponseBody struct {
	Breakpoints []*BreakpointLocation `json:"breakpoints"`
}

type CancelArguments struct {
	ProgressId *String  `json:"progressId,omitempty"`
	RequestId  *Integer `json:"requestId,omitempty"`
}

type Boolean bool

func (v *Boolean) Eq(u bool) bool { return v != nil && bool(*v) == u }
func (v *Boolean) Get() bool      { return bool(*v) }
func (v *Boolean) GetOr(u bool) bool {
	if v == nil {
		return u
	} else {
		return bool(*v)
	}
}
func (v *Boolean) True() bool  { return v != nil && bool(*v) }
func (v *Boolean) False() bool { return v != nil && !bool(*v) }

type ColumnDescriptorType string

const (
	ColumnDescriptorType_String           ColumnDescriptorType = "string"
	ColumnDescriptorType_Number           ColumnDescriptorType = "number"
	ColumnDescriptorType_Boolean          ColumnDescriptorType = "boolean"
	ColumnDescriptorType_UnixTimestampUTC ColumnDescriptorType = "unixTimestampUTC"
)

type ColumnDescriptor struct {
	AttributeName string   `json:"attributeName"`
	Format        *String  `json:"format,omitempty"`
	Label         string   `json:"label"`
	Type          *String  `json:"type,omitempty"`
	Width         *Integer `json:"width,omitempty"`
}

type ExceptionBreakpointsFilter struct {
	ConditionDescription *String  `json:"conditionDescription,omitempty"`
	Default              *Boolean `json:"default,omitempty"`
	Description          *String  `json:"description,omitempty"`
	Filter               string   `json:"filter"`
	Label                string   `json:"label"`
	SupportsCondition    *Boolean `json:"supportsCondition,omitempty"`
}

type Capabilities struct {
	AdditionalModuleColumns            []*ColumnDescriptor           `json:"additionalModuleColumns,omitempty"`
	CompletionTriggerCharacters        []string                      `json:"completionTriggerCharacters,omitempty"`
	ExceptionBreakpointFilters         []*ExceptionBreakpointsFilter `json:"exceptionBreakpointFilters,omitempty"`
	SupportSuspendDebuggee             *Boolean                      `json:"supportSuspendDebuggee,omitempty"`
	SupportTerminateDebuggee           *Boolean                      `json:"supportTerminateDebuggee,omitempty"`
	SupportedChecksumAlgorithms        []ChecksumAlgorithm           `json:"supportedChecksumAlgorithms,omitempty"`
	SupportsBreakpointLocationsRequest *Boolean                      `json:"supportsBreakpointLocationsRequest,omitempty"`
	SupportsCancelRequest              *Boolean                      `json:"supportsCancelRequest,omitempty"`
	SupportsClipboardContext           *Boolean                      `json:"supportsClipboardContext,omitempty"`
	SupportsCompletionsRequest         *Boolean                      `json:"supportsCompletionsRequest,omitempty"`
	SupportsConditionalBreakpoints     *Boolean                      `json:"supportsConditionalBreakpoints,omitempty"`
	SupportsConfigurationDoneRequest   *Boolean                      `json:"supportsConfigurationDoneRequest,omitempty"`
	SupportsDataBreakpoints            *Boolean                      `json:"supportsDataBreakpoints,omitempty"`
	SupportsDelayedStackTraceLoading   *Boolean                      `json:"supportsDelayedStackTraceLoading,omitempty"`
	SupportsDisassembleRequest         *Boolean                      `json:"supportsDisassembleRequest,omitempty"`
	SupportsEvaluateForHovers          *Boolean                      `json:"supportsEvaluateForHovers,omitempty"`
	SupportsExceptionFilterOptions     *Boolean                      `json:"supportsExceptionFilterOptions,omitempty"`
	SupportsExceptionInfoRequest       *Boolean                      `json:"supportsExceptionInfoRequest,omitempty"`
	SupportsExceptionOptions           *Boolean                      `json:"supportsExceptionOptions,omitempty"`
	SupportsFunctionBreakpoints        *Boolean                      `json:"supportsFunctionBreakpoints,omitempty"`
	SupportsGotoTargetsRequest         *Boolean                      `json:"supportsGotoTargetsRequest,omitempty"`
	SupportsHitConditionalBreakpoints  *Boolean                      `json:"supportsHitConditionalBreakpoints,omitempty"`
	SupportsInstructionBreakpoints     *Boolean                      `json:"supportsInstructionBreakpoints,omitempty"`
	SupportsLoadedSourcesRequest       *Boolean                      `json:"supportsLoadedSourcesRequest,omitempty"`
	SupportsLogPoints                  *Boolean                      `json:"supportsLogPoints,omitempty"`
	SupportsModulesRequest             *Boolean                      `json:"supportsModulesRequest,omitempty"`
	SupportsReadMemoryRequest          *Boolean                      `json:"supportsReadMemoryRequest,omitempty"`
	SupportsRestartFrame               *Boolean                      `json:"supportsRestartFrame,omitempty"`
	SupportsRestartRequest             *Boolean                      `json:"supportsRestartRequest,omitempty"`
	SupportsSetExpression              *Boolean                      `json:"supportsSetExpression,omitempty"`
	SupportsSetVariable                *Boolean                      `json:"supportsSetVariable,omitempty"`
	SupportsStepBack                   *Boolean                      `json:"supportsStepBack,omitempty"`
	SupportsStepInTargetsRequest       *Boolean                      `json:"supportsStepInTargetsRequest,omitempty"`
	SupportsSteppingGranularity        *Boolean                      `json:"supportsSteppingGranularity,omitempty"`
	SupportsTerminateRequest           *Boolean                      `json:"supportsTerminateRequest,omitempty"`
	SupportsTerminateThreadsRequest    *Boolean                      `json:"supportsTerminateThreadsRequest,omitempty"`
	SupportsValueFormattingOptions     *Boolean                      `json:"supportsValueFormattingOptions,omitempty"`
	SupportsWriteMemoryRequest         *Boolean                      `json:"supportsWriteMemoryRequest,omitempty"`
}

type CapabilitiesEventBody struct {
	Capabilities Capabilities `json:"capabilities"`
}

type CompletionItemType string

const (
	CompletionItemType_Method      CompletionItemType = "method"
	CompletionItemType_Function    CompletionItemType = "function"
	CompletionItemType_Constructor CompletionItemType = "constructor"
	CompletionItemType_Field       CompletionItemType = "field"
	CompletionItemType_Variable    CompletionItemType = "variable"
	CompletionItemType_Class       CompletionItemType = "class"
	CompletionItemType_Interface   CompletionItemType = "interface"
	CompletionItemType_Module      CompletionItemType = "module"
	CompletionItemType_Property    CompletionItemType = "property"
	CompletionItemType_Unit        CompletionItemType = "unit"
	CompletionItemType_Value       CompletionItemType = "value"
	CompletionItemType_Enum        CompletionItemType = "enum"
	CompletionItemType_Keyword     CompletionItemType = "keyword"
	CompletionItemType_Snippet     CompletionItemType = "snippet"
	CompletionItemType_Text        CompletionItemType = "text"
	CompletionItemType_Color       CompletionItemType = "color"
	CompletionItemType_File        CompletionItemType = "file"
	CompletionItemType_Reference   CompletionItemType = "reference"
	CompletionItemType_Customcolor CompletionItemType = "customcolor"
)

type CompletionItem struct {
	Label           string   `json:"label"`
	Length          *Integer `json:"length,omitempty"`
	SelectionLength *Integer `json:"selectionLength,omitempty"`
	SelectionStart  *Integer `json:"selectionStart,omitempty"`
	SortText        *String  `json:"sortText,omitempty"`
	Start           *Integer `json:"start,omitempty"`
	Text            *String  `json:"text,omitempty"`
	Type            *String  `json:"type,omitempty"`
}

type CompletionsArguments struct {
	Column  int      `json:"column"`
	FrameId *Integer `json:"frameId,omitempty"`
	Line    *Integer `json:"line,omitempty"`
	Text    string   `json:"text"`
}

type CompletionsResponseBody struct {
	Targets []*CompletionItem `json:"targets"`
}

type ContinueArguments struct {
	ThreadId int `json:"threadId"`
}

type ContinueResponseBody struct {
	AllThreadsContinued *Boolean `json:"allThreadsContinued,omitempty"`
}

type ContinuedEventBody struct {
	AllThreadsContinued *Boolean `json:"allThreadsContinued,omitempty"`
	ThreadId            int      `json:"threadId"`
}

type DataBreakpointAccessType string

const (
	DataBreakpointAccessType_Read      DataBreakpointAccessType = "read"
	DataBreakpointAccessType_Write     DataBreakpointAccessType = "write"
	DataBreakpointAccessType_ReadWrite DataBreakpointAccessType = "readWrite"
)

type DataBreakpoint struct {
	AccessType   *String `json:"accessType,omitempty"`
	Condition    *String `json:"condition,omitempty"`
	DataId       string  `json:"dataId"`
	HitCondition *String `json:"hitCondition,omitempty"`
}

type DataBreakpointInfoArguments struct {
	Name               string   `json:"name"`
	VariablesReference *Integer `json:"variablesReference,omitempty"`
}

type DataBreakpointInfoResponseBody struct {
	AccessTypes []DataBreakpointAccessType `json:"accessTypes,omitempty"`
	CanPersist  *Boolean                   `json:"canPersist,omitempty"`
	DataId      interface{}                `json:"dataId"`
	Description string                     `json:"description"`
}

type DisassembleArguments struct {
	InstructionCount  int      `json:"instructionCount"`
	InstructionOffset *Integer `json:"instructionOffset,omitempty"`
	MemoryReference   string   `json:"memoryReference"`
	Offset            *Integer `json:"offset,omitempty"`
	ResolveSymbols    *Boolean `json:"resolveSymbols,omitempty"`
}

type DisassembledInstruction struct {
	Address          string   `json:"address"`
	Column           *Integer `json:"column,omitempty"`
	EndColumn        *Integer `json:"endColumn,omitempty"`
	EndLine          *Integer `json:"endLine,omitempty"`
	Instruction      string   `json:"instruction"`
	InstructionBytes *String  `json:"instructionBytes,omitempty"`
	Line             *Integer `json:"line,omitempty"`
	Location         *Source  `json:"location,omitempty"`
	Symbol           *String  `json:"symbol,omitempty"`
}

type DisassembleResponseBody struct {
	Instructions []*DisassembledInstruction `json:"instructions"`
}

type DisconnectArguments struct {
	Restart           *Boolean `json:"restart,omitempty"`
	SuspendDebuggee   *Boolean `json:"suspendDebuggee,omitempty"`
	TerminateDebuggee *Boolean `json:"terminateDebuggee,omitempty"`
}

type Message struct {
	Format        string            `json:"format"`
	Id            int               `json:"id"`
	SendTelemetry *Boolean          `json:"sendTelemetry,omitempty"`
	ShowUser      *Boolean          `json:"showUser,omitempty"`
	Url           *String           `json:"url,omitempty"`
	UrlLabel      *String           `json:"urlLabel,omitempty"`
	Variables     map[string]string `json:"variables,omitempty"`
}

type ErrorResponseBody struct {
	Error *Message `json:"error,omitempty"`
}

type ValueFormat struct {
	Hex *Boolean `json:"hex,omitempty"`
}

type EvaluateArguments struct {
	Context    *String      `json:"context,omitempty"`
	Expression string       `json:"expression"`
	Format     *ValueFormat `json:"format,omitempty"`
	FrameId    *Integer     `json:"frameId,omitempty"`
}

type VariablePresentationHint struct {
	Attributes []string `json:"attributes,omitempty"`
	Kind       *String  `json:"kind,omitempty"`
	Visibility *String  `json:"visibility,omitempty"`
}

type EvaluateResponseBody struct {
	IndexedVariables   *Integer                  `json:"indexedVariables,omitempty"`
	MemoryReference    *String                   `json:"memoryReference,omitempty"`
	NamedVariables     *Integer                  `json:"namedVariables,omitempty"`
	PresentationHint   *VariablePresentationHint `json:"presentationHint,omitempty"`
	Result             string                    `json:"result"`
	Type               *String                   `json:"type,omitempty"`
	VariablesReference int                       `json:"variablesReference"`
}

type ExceptionBreakMode string

const (
	ExceptionBreakMode_Never         ExceptionBreakMode = "never"
	ExceptionBreakMode_Always        ExceptionBreakMode = "always"
	ExceptionBreakMode_Unhandled     ExceptionBreakMode = "unhandled"
	ExceptionBreakMode_UserUnhandled ExceptionBreakMode = "userUnhandled"
)

type ExceptionDetails struct {
	EvaluateName   *String             `json:"evaluateName,omitempty"`
	FullTypeName   *String             `json:"fullTypeName,omitempty"`
	InnerException []*ExceptionDetails `json:"innerException,omitempty"`
	Message        *String             `json:"message,omitempty"`
	StackTrace     *String             `json:"stackTrace,omitempty"`
	TypeName       *String             `json:"typeName,omitempty"`
}

type ExceptionFilterOptions struct {
	Condition *String `json:"condition,omitempty"`
	FilterId  string  `json:"filterId"`
}

type ExceptionInfoArguments struct {
	ThreadId int `json:"threadId"`
}

type ExceptionInfoResponseBody struct {
	BreakMode   ExceptionBreakMode `json:"breakMode"`
	Description *String            `json:"description,omitempty"`
	Details     *ExceptionDetails  `json:"details,omitempty"`
	ExceptionId string             `json:"exceptionId"`
}

type ExceptionPathSegment struct {
	Names  []string `json:"names"`
	Negate *Boolean `json:"negate,omitempty"`
}

type ExceptionOptions struct {
	BreakMode ExceptionBreakMode      `json:"breakMode"`
	Path      []*ExceptionPathSegment `json:"path,omitempty"`
}

type ExitedEventBody struct {
	ExitCode int `json:"exitCode"`
}

type FunctionBreakpoint struct {
	Condition    *String `json:"condition,omitempty"`
	HitCondition *String `json:"hitCondition,omitempty"`
	Name         string  `json:"name"`
}

type GotoArguments struct {
	TargetId int `json:"targetId"`
	ThreadId int `json:"threadId"`
}

type GotoTarget struct {
	Column                      *Integer `json:"column,omitempty"`
	EndColumn                   *Integer `json:"endColumn,omitempty"`
	EndLine                     *Integer `json:"endLine,omitempty"`
	Id                          int      `json:"id"`
	InstructionPointerReference *String  `json:"instructionPointerReference,omitempty"`
	Label                       string   `json:"label"`
	Line                        int      `json:"line"`
}

type GotoTargetsArguments struct {
	Column *Integer `json:"column,omitempty"`
	Line   int      `json:"line"`
	Source Source   `json:"source"`
}

type GotoTargetsResponseBody struct {
	Targets []*GotoTarget `json:"targets"`
}

type InitializeRequestArguments struct {
	AdapterID                    string   `json:"adapterID"`
	ClientID                     *String  `json:"clientID,omitempty"`
	ClientName                   *String  `json:"clientName,omitempty"`
	ColumnsStartAt1              *Boolean `json:"columnsStartAt1,omitempty"`
	LinesStartAt1                *Boolean `json:"linesStartAt1,omitempty"`
	Locale                       *String  `json:"locale,omitempty"`
	PathFormat                   *String  `json:"pathFormat,omitempty"`
	SupportsInvalidatedEvent     *Boolean `json:"supportsInvalidatedEvent,omitempty"`
	SupportsMemoryReferences     *Boolean `json:"supportsMemoryReferences,omitempty"`
	SupportsProgressReporting    *Boolean `json:"supportsProgressReporting,omitempty"`
	SupportsRunInTerminalRequest *Boolean `json:"supportsRunInTerminalRequest,omitempty"`
	SupportsVariablePaging       *Boolean `json:"supportsVariablePaging,omitempty"`
	SupportsVariableType         *Boolean `json:"supportsVariableType,omitempty"`
}

type InstructionBreakpoint struct {
	Condition            *String  `json:"condition,omitempty"`
	HitCondition         *String  `json:"hitCondition,omitempty"`
	InstructionReference string   `json:"instructionReference"`
	Offset               *Integer `json:"offset,omitempty"`
}

type InvalidatedEventBody struct {
	Areas        []string `json:"areas,omitempty"`
	StackFrameId *Integer `json:"stackFrameId,omitempty"`
	ThreadId     *Integer `json:"threadId,omitempty"`
}

type LaunchRequestArguments struct {
	NoDebug *Boolean    `json:"noDebug,omitempty"`
	Restart interface{} `json:"__restart,omitempty"`
}

type LoadedSourceEventBodyReason string

const (
	LoadedSourceEventBodyReason_New     LoadedSourceEventBodyReason = "new"
	LoadedSourceEventBodyReason_Changed LoadedSourceEventBodyReason = "changed"
	LoadedSourceEventBodyReason_Removed LoadedSourceEventBodyReason = "removed"
)

type LoadedSourceEventBody struct {
	Reason LoadedSourceEventBodyReason `json:"reason"`
	Source Source                      `json:"source"`
}

type LoadedSourcesResponseBody struct {
	Sources []*Source `json:"sources"`
}

type Module struct {
	AddressRange   *String     `json:"addressRange,omitempty"`
	DateTimeStamp  *String     `json:"dateTimeStamp,omitempty"`
	Id             interface{} `json:"id"`
	IsOptimized    *Boolean    `json:"isOptimized,omitempty"`
	IsUserCode     *Boolean    `json:"isUserCode,omitempty"`
	Name           string      `json:"name"`
	Path           *String     `json:"path,omitempty"`
	SymbolFilePath *String     `json:"symbolFilePath,omitempty"`
	SymbolStatus   *String     `json:"symbolStatus,omitempty"`
	Version        *String     `json:"version,omitempty"`
}

type ModuleEventBodyReason string

const (
	ModuleEventBodyReason_New     ModuleEventBodyReason = "new"
	ModuleEventBodyReason_Changed ModuleEventBodyReason = "changed"
	ModuleEventBodyReason_Removed ModuleEventBodyReason = "removed"
)

type ModuleEventBody struct {
	Module Module                `json:"module"`
	Reason ModuleEventBodyReason `json:"reason"`
}

type ModulesArguments struct {
	ModuleCount *Integer `json:"moduleCount,omitempty"`
	StartModule *Integer `json:"startModule,omitempty"`
}

type ModulesResponseBody struct {
	Modules      []*Module `json:"modules"`
	TotalModules *Integer  `json:"totalModules,omitempty"`
}

type ModulesViewDescriptor struct {
	Columns []*ColumnDescriptor `json:"columns"`
}

type SteppingGranularity string

const (
	SteppingGranularity_Statement   SteppingGranularity = "statement"
	SteppingGranularity_Line        SteppingGranularity = "line"
	SteppingGranularity_Instruction SteppingGranularity = "instruction"
)

type NextArguments struct {
	Granularity *String `json:"granularity,omitempty"`
	ThreadId    int     `json:"threadId"`
}

type OutputEventBodyGroup string

const (
	OutputEventBodyGroup_Start          OutputEventBodyGroup = "start"
	OutputEventBodyGroup_StartCollapsed OutputEventBodyGroup = "startCollapsed"
	OutputEventBodyGroup_End            OutputEventBodyGroup = "end"
)

type OutputEventBody struct {
	Category           *String     `json:"category,omitempty"`
	Column             *Integer    `json:"column,omitempty"`
	Data               interface{} `json:"data,omitempty"`
	Group              *String     `json:"group,omitempty"`
	Line               *Integer    `json:"line,omitempty"`
	Output             string      `json:"output"`
	Source             *Source     `json:"source,omitempty"`
	VariablesReference *Integer    `json:"variablesReference,omitempty"`
}

type PauseArguments struct {
	ThreadId int `json:"threadId"`
}

type ProcessEventBodyStartMethod string

const (
	ProcessEventBodyStartMethod_Launch                   ProcessEventBodyStartMethod = "launch"
	ProcessEventBodyStartMethod_Attach                   ProcessEventBodyStartMethod = "attach"
	ProcessEventBodyStartMethod_AttachForSuspendedLaunch ProcessEventBodyStartMethod = "attachForSuspendedLaunch"
)

type ProcessEventBody struct {
	IsLocalProcess  *Boolean `json:"isLocalProcess,omitempty"`
	Name            string   `json:"name"`
	PointerSize     *Integer `json:"pointerSize,omitempty"`
	StartMethod     *String  `json:"startMethod,omitempty"`
	SystemProcessId *Integer `json:"systemProcessId,omitempty"`
}

type ProgressEndEventBody struct {
	Message    *String `json:"message,omitempty"`
	ProgressId string  `json:"progressId"`
}

type Number float64

func (v *Number) Eq(u float64) bool { return v != nil && float64(*v) == u }
func (v *Number) Get() float64      { return float64(*v) }
func (v *Number) GetOr(u float64) float64 {
	if v == nil {
		return u
	} else {
		return float64(*v)
	}
}

type ProgressStartEventBody struct {
	Cancellable *Boolean `json:"cancellable,omitempty"`
	Message     *String  `json:"message,omitempty"`
	Percentage  *Number  `json:"percentage,omitempty"`
	ProgressId  string   `json:"progressId"`
	RequestId   *Integer `json:"requestId,omitempty"`
	Title       string   `json:"title"`
}

type ProgressUpdateEventBody struct {
	Message    *String `json:"message,omitempty"`
	Percentage *Number `json:"percentage,omitempty"`
	ProgressId string  `json:"progressId"`
}

type ReadMemoryArguments struct {
	Count           int      `json:"count"`
	MemoryReference string   `json:"memoryReference"`
	Offset          *Integer `json:"offset,omitempty"`
}

type ReadMemoryResponseBody struct {
	Address         string   `json:"address"`
	Data            *String  `json:"data,omitempty"`
	UnreadableBytes *Integer `json:"unreadableBytes,omitempty"`
}

type RestartArguments struct {
	Arguments interface{} `json:"arguments,omitempty"`
}

type RestartFrameArguments struct {
	FrameId int `json:"frameId"`
}

type ReverseContinueArguments struct {
	ThreadId int `json:"threadId"`
}

type RunInTerminalRequestArgumentsKind string

const (
	RunInTerminalRequestArgumentsKind_Integrated RunInTerminalRequestArgumentsKind = "integrated"
	RunInTerminalRequestArgumentsKind_External   RunInTerminalRequestArgumentsKind = "external"
)

type RunInTerminalRequestArguments struct {
	Args  []string               `json:"args"`
	Cwd   string                 `json:"cwd"`
	Env   map[string]interface{} `json:"env,omitempty"`
	Kind  *String                `json:"kind,omitempty"`
	Title *String                `json:"title,omitempty"`
}

type RunInTerminalResponseBody struct {
	ProcessId      *Integer `json:"processId,omitempty"`
	ShellProcessId *Integer `json:"shellProcessId,omitempty"`
}

type Scope struct {
	Column             *Integer `json:"column,omitempty"`
	EndColumn          *Integer `json:"endColumn,omitempty"`
	EndLine            *Integer `json:"endLine,omitempty"`
	Expensive          bool     `json:"expensive"`
	IndexedVariables   *Integer `json:"indexedVariables,omitempty"`
	Line               *Integer `json:"line,omitempty"`
	Name               string   `json:"name"`
	NamedVariables     *Integer `json:"namedVariables,omitempty"`
	PresentationHint   *String  `json:"presentationHint,omitempty"`
	Source             *Source  `json:"source,omitempty"`
	VariablesReference int      `json:"variablesReference"`
}

type ScopesArguments struct {
	FrameId int `json:"frameId"`
}

type ScopesResponseBody struct {
	Scopes []*Scope `json:"scopes"`
}

type SourceBreakpoint struct {
	Column       *Integer `json:"column,omitempty"`
	Condition    *String  `json:"condition,omitempty"`
	HitCondition *String  `json:"hitCondition,omitempty"`
	Line         int      `json:"line"`
	LogMessage   *String  `json:"logMessage,omitempty"`
}

type SetBreakpointsArguments struct {
	Breakpoints    []*SourceBreakpoint `json:"breakpoints,omitempty"`
	Lines          []int               `json:"lines,omitempty"`
	Source         Source              `json:"source"`
	SourceModified *Boolean            `json:"sourceModified,omitempty"`
}

type SetBreakpointsResponseBody struct {
	Breakpoints []*Breakpoint `json:"breakpoints"`
}

type SetDataBreakpointsArguments struct {
	Breakpoints []*DataBreakpoint `json:"breakpoints"`
}

type SetDataBreakpointsResponseBody struct {
	Breakpoints []*Breakpoint `json:"breakpoints"`
}

type SetExceptionBreakpointsArguments struct {
	ExceptionOptions []*ExceptionOptions       `json:"exceptionOptions,omitempty"`
	FilterOptions    []*ExceptionFilterOptions `json:"filterOptions,omitempty"`
	Filters          []string                  `json:"filters"`
}

type SetExpressionArguments struct {
	Expression string       `json:"expression"`
	Format     *ValueFormat `json:"format,omitempty"`
	FrameId    *Integer     `json:"frameId,omitempty"`
	Value      string       `json:"value"`
}

type SetExpressionResponseBody struct {
	IndexedVariables   *Integer                  `json:"indexedVariables,omitempty"`
	NamedVariables     *Integer                  `json:"namedVariables,omitempty"`
	PresentationHint   *VariablePresentationHint `json:"presentationHint,omitempty"`
	Type               *String                   `json:"type,omitempty"`
	Value              string                    `json:"value"`
	VariablesReference *Integer                  `json:"variablesReference,omitempty"`
}

type SetFunctionBreakpointsArguments struct {
	Breakpoints []*FunctionBreakpoint `json:"breakpoints"`
}

type SetFunctionBreakpointsResponseBody struct {
	Breakpoints []*Breakpoint `json:"breakpoints"`
}

type SetInstructionBreakpointsArguments struct {
	Breakpoints []*InstructionBreakpoint `json:"breakpoints"`
}

type SetInstructionBreakpointsResponseBody struct {
	Breakpoints []*Breakpoint `json:"breakpoints"`
}

type SetVariableArguments struct {
	Format             *ValueFormat `json:"format,omitempty"`
	Name               string       `json:"name"`
	Value              string       `json:"value"`
	VariablesReference int          `json:"variablesReference"`
}

type SetVariableResponseBody struct {
	IndexedVariables   *Integer `json:"indexedVariables,omitempty"`
	NamedVariables     *Integer `json:"namedVariables,omitempty"`
	Type               *String  `json:"type,omitempty"`
	Value              string   `json:"value"`
	VariablesReference *Integer `json:"variablesReference,omitempty"`
}

type SourceArguments struct {
	Source          *Source `json:"source,omitempty"`
	SourceReference int     `json:"sourceReference"`
}

type SourceResponseBody struct {
	Content  string  `json:"content"`
	MimeType *String `json:"mimeType,omitempty"`
}

type StackFramePresentationHint string

const (
	StackFramePresentationHint_Normal StackFramePresentationHint = "normal"
	StackFramePresentationHint_Label  StackFramePresentationHint = "label"
	StackFramePresentationHint_Subtle StackFramePresentationHint = "subtle"
)

type StackFrame struct {
	CanRestart                  *Boolean    `json:"canRestart,omitempty"`
	Column                      int         `json:"column"`
	EndColumn                   *Integer    `json:"endColumn,omitempty"`
	EndLine                     *Integer    `json:"endLine,omitempty"`
	Id                          int         `json:"id"`
	InstructionPointerReference *String     `json:"instructionPointerReference,omitempty"`
	Line                        int         `json:"line"`
	ModuleId                    interface{} `json:"moduleId,omitempty"`
	Name                        string      `json:"name"`
	PresentationHint            *String     `json:"presentationHint,omitempty"`
	Source                      *Source     `json:"source,omitempty"`
}

type StackFrameFormat struct {
	ValueFormat
	IncludeAll      *Boolean `json:"includeAll,omitempty"`
	Line            *Boolean `json:"line,omitempty"`
	Module          *Boolean `json:"module,omitempty"`
	ParameterNames  *Boolean `json:"parameterNames,omitempty"`
	ParameterTypes  *Boolean `json:"parameterTypes,omitempty"`
	ParameterValues *Boolean `json:"parameterValues,omitempty"`
	Parameters      *Boolean `json:"parameters,omitempty"`
}

type StackTraceArguments struct {
	Format     *StackFrameFormat `json:"format,omitempty"`
	Levels     *Integer          `json:"levels,omitempty"`
	StartFrame *Integer          `json:"startFrame,omitempty"`
	ThreadId   int               `json:"threadId"`
}

type StackTraceResponseBody struct {
	StackFrames []*StackFrame `json:"stackFrames"`
	TotalFrames *Integer      `json:"totalFrames,omitempty"`
}

type StepBackArguments struct {
	Granularity *String `json:"granularity,omitempty"`
	ThreadId    int     `json:"threadId"`
}

type StepInArguments struct {
	Granularity *String  `json:"granularity,omitempty"`
	TargetId    *Integer `json:"targetId,omitempty"`
	ThreadId    int      `json:"threadId"`
}

type StepInTarget struct {
	Id    int    `json:"id"`
	Label string `json:"label"`
}

type StepInTargetsArguments struct {
	FrameId int `json:"frameId"`
}

type StepInTargetsResponseBody struct {
	Targets []*StepInTarget `json:"targets"`
}

type StepOutArguments struct {
	Granularity *String `json:"granularity,omitempty"`
	ThreadId    int     `json:"threadId"`
}

type StoppedEventBody struct {
	AllThreadsStopped *Boolean `json:"allThreadsStopped,omitempty"`
	Description       *String  `json:"description,omitempty"`
	HitBreakpointIds  []int    `json:"hitBreakpointIds,omitempty"`
	PreserveFocusHint *Boolean `json:"preserveFocusHint,omitempty"`
	Reason            string   `json:"reason"`
	Text              *String  `json:"text,omitempty"`
	ThreadId          *Integer `json:"threadId,omitempty"`
}

type TerminateArguments struct {
	Restart *Boolean `json:"restart,omitempty"`
}

type TerminateThreadsArguments struct {
	ThreadIds []int `json:"threadIds,omitempty"`
}

type TerminatedEventBody struct {
	Restart interface{} `json:"restart,omitempty"`
}

type Thread struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

type ThreadEventBody struct {
	Reason   string `json:"reason"`
	ThreadId int    `json:"threadId"`
}

type ThreadsResponseBody struct {
	Threads []*Thread `json:"threads"`
}

type Variable struct {
	EvaluateName       *String                   `json:"evaluateName,omitempty"`
	IndexedVariables   *Integer                  `json:"indexedVariables,omitempty"`
	MemoryReference    *String                   `json:"memoryReference,omitempty"`
	Name               string                    `json:"name"`
	NamedVariables     *Integer                  `json:"namedVariables,omitempty"`
	PresentationHint   *VariablePresentationHint `json:"presentationHint,omitempty"`
	Type               *String                   `json:"type,omitempty"`
	Value              string                    `json:"value"`
	VariablesReference int                       `json:"variablesReference"`
}

type VariablesArgumentsFilter string

const (
	VariablesArgumentsFilter_Indexed VariablesArgumentsFilter = "indexed"
	VariablesArgumentsFilter_Named   VariablesArgumentsFilter = "named"
)

type VariablesArguments struct {
	Count              *Integer     `json:"count,omitempty"`
	Filter             *String      `json:"filter,omitempty"`
	Format             *ValueFormat `json:"format,omitempty"`
	Start              *Integer     `json:"start,omitempty"`
	VariablesReference int          `json:"variablesReference"`
}

type VariablesResponseBody struct {
	Variables []*Variable `json:"variables"`
}

type WriteMemoryArguments struct {
	AllowPartial    *Boolean `json:"allowPartial,omitempty"`
	Data            string   `json:"data"`
	MemoryReference string   `json:"memoryReference"`
	Offset          *Integer `json:"offset,omitempty"`
}
