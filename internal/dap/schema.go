package dap

// Code generated by 'go run ../internal/cmd/genschema'. DO NOT EDIT.

type ProtocolMessageType string

const (
	ProtocolMessageType_Request  ProtocolMessageType = "request"
	ProtocolMessageType_Response ProtocolMessageType = "response"
	ProtocolMessageType_Event    ProtocolMessageType = "event"
)

type ProtocolMessage struct {
	Seq  int                 `json:"seq,omitempty"`
	Type ProtocolMessageType `json:"type,omitempty"`
}

type Request struct {
	ProtocolMessage
	Arguments RequestArguments `json:"arguments,omitempty"`
	Command   string           `json:"command,omitempty"`
}

type AttachRequestArguments struct {
	Restart interface{} `json:"__restart,omitempty"`
}

type Response struct {
	ProtocolMessage
	Body       ResponseBody `json:"body,omitempty"`
	Command    string       `json:"command,omitempty"`
	Message    string       `json:"message,omitempty"`
	RequestSeq int          `json:"request_seq,omitempty"`
	Success    bool         `json:"success,omitempty"`
}

type SourcePresentationHint string

const (
	SourcePresentationHint_Normal      SourcePresentationHint = "normal"
	SourcePresentationHint_Emphasize   SourcePresentationHint = "emphasize"
	SourcePresentationHint_Deemphasize SourcePresentationHint = "deemphasize"
)

type ChecksumAlgorithm string

const (
	ChecksumAlgorithm_MD5       ChecksumAlgorithm = "MD5"
	ChecksumAlgorithm_SHA1      ChecksumAlgorithm = "SHA1"
	ChecksumAlgorithm_SHA256    ChecksumAlgorithm = "SHA256"
	ChecksumAlgorithm_Timestamp ChecksumAlgorithm = "timestamp"
)

type Checksum struct {
	Algorithm ChecksumAlgorithm `json:"algorithm,omitempty"`
	Checksum  string            `json:"checksum,omitempty"`
}

type Source struct {
	AdapterData      interface{}            `json:"adapterData,omitempty"`
	Checksums        []*Checksum            `json:"checksums,omitempty"`
	Name             string                 `json:"name,omitempty"`
	Origin           string                 `json:"origin,omitempty"`
	Path             string                 `json:"path,omitempty"`
	PresentationHint SourcePresentationHint `json:"presentationHint,omitempty"`
	SourceReference  int                    `json:"sourceReference,omitempty"`
	Sources          []*Source              `json:"sources,omitempty"`
}

type Breakpoint struct {
	Column               int     `json:"column,omitempty"`
	EndColumn            int     `json:"endColumn,omitempty"`
	EndLine              int     `json:"endLine,omitempty"`
	Id                   int     `json:"id,omitempty"`
	InstructionReference string  `json:"instructionReference,omitempty"`
	Line                 int     `json:"line,omitempty"`
	Message              string  `json:"message,omitempty"`
	Offset               int     `json:"offset,omitempty"`
	Source               *Source `json:"source,omitempty"`
	Verified             bool    `json:"verified,omitempty"`
}

type Event struct {
	ProtocolMessage
	Body  EventBody `json:"body,omitempty"`
	Event string    `json:"event,omitempty"`
}

type BreakpointEventBody struct {
	Breakpoint *Breakpoint `json:"breakpoint,omitempty"`
	Reason     string      `json:"reason,omitempty"`
}

type BreakpointLocation struct {
	Column    int `json:"column,omitempty"`
	EndColumn int `json:"endColumn,omitempty"`
	EndLine   int `json:"endLine,omitempty"`
	Line      int `json:"line,omitempty"`
}

type BreakpointLocationsArguments struct {
	Column    int     `json:"column,omitempty"`
	EndColumn int     `json:"endColumn,omitempty"`
	EndLine   int     `json:"endLine,omitempty"`
	Line      int     `json:"line,omitempty"`
	Source    *Source `json:"source,omitempty"`
}

type BreakpointLocationsResponseBody struct {
	Breakpoints []*BreakpointLocation `json:"breakpoints,omitempty"`
}

type CancelArguments struct {
	ProgressId string `json:"progressId,omitempty"`
	RequestId  int    `json:"requestId,omitempty"`
}

type ExceptionBreakpointsFilter struct {
	ConditionDescription string `json:"conditionDescription,omitempty"`
	Default              bool   `json:"default,omitempty"`
	Description          string `json:"description,omitempty"`
	Filter               string `json:"filter,omitempty"`
	Label                string `json:"label,omitempty"`
	SupportsCondition    bool   `json:"supportsCondition,omitempty"`
}

type ColumnDescriptorType string

const (
	ColumnDescriptorType_String           ColumnDescriptorType = "string"
	ColumnDescriptorType_Number           ColumnDescriptorType = "number"
	ColumnDescriptorType_Boolean          ColumnDescriptorType = "boolean"
	ColumnDescriptorType_UnixTimestampUTC ColumnDescriptorType = "unixTimestampUTC"
)

type ColumnDescriptor struct {
	AttributeName string               `json:"attributeName,omitempty"`
	Format        string               `json:"format,omitempty"`
	Label         string               `json:"label,omitempty"`
	Type          ColumnDescriptorType `json:"type,omitempty"`
	Width         int                  `json:"width,omitempty"`
}

type Capabilities struct {
	AdditionalModuleColumns            []*ColumnDescriptor           `json:"additionalModuleColumns,omitempty"`
	CompletionTriggerCharacters        []string                      `json:"completionTriggerCharacters,omitempty"`
	ExceptionBreakpointFilters         []*ExceptionBreakpointsFilter `json:"exceptionBreakpointFilters,omitempty"`
	SupportSuspendDebuggee             bool                          `json:"supportSuspendDebuggee,omitempty"`
	SupportTerminateDebuggee           bool                          `json:"supportTerminateDebuggee,omitempty"`
	SupportedChecksumAlgorithms        []ChecksumAlgorithm           `json:"supportedChecksumAlgorithms,omitempty"`
	SupportsBreakpointLocationsRequest bool                          `json:"supportsBreakpointLocationsRequest,omitempty"`
	SupportsCancelRequest              bool                          `json:"supportsCancelRequest,omitempty"`
	SupportsClipboardContext           bool                          `json:"supportsClipboardContext,omitempty"`
	SupportsCompletionsRequest         bool                          `json:"supportsCompletionsRequest,omitempty"`
	SupportsConditionalBreakpoints     bool                          `json:"supportsConditionalBreakpoints,omitempty"`
	SupportsConfigurationDoneRequest   bool                          `json:"supportsConfigurationDoneRequest,omitempty"`
	SupportsDataBreakpoints            bool                          `json:"supportsDataBreakpoints,omitempty"`
	SupportsDelayedStackTraceLoading   bool                          `json:"supportsDelayedStackTraceLoading,omitempty"`
	SupportsDisassembleRequest         bool                          `json:"supportsDisassembleRequest,omitempty"`
	SupportsEvaluateForHovers          bool                          `json:"supportsEvaluateForHovers,omitempty"`
	SupportsExceptionFilterOptions     bool                          `json:"supportsExceptionFilterOptions,omitempty"`
	SupportsExceptionInfoRequest       bool                          `json:"supportsExceptionInfoRequest,omitempty"`
	SupportsExceptionOptions           bool                          `json:"supportsExceptionOptions,omitempty"`
	SupportsFunctionBreakpoints        bool                          `json:"supportsFunctionBreakpoints,omitempty"`
	SupportsGotoTargetsRequest         bool                          `json:"supportsGotoTargetsRequest,omitempty"`
	SupportsHitConditionalBreakpoints  bool                          `json:"supportsHitConditionalBreakpoints,omitempty"`
	SupportsInstructionBreakpoints     bool                          `json:"supportsInstructionBreakpoints,omitempty"`
	SupportsLoadedSourcesRequest       bool                          `json:"supportsLoadedSourcesRequest,omitempty"`
	SupportsLogPoints                  bool                          `json:"supportsLogPoints,omitempty"`
	SupportsModulesRequest             bool                          `json:"supportsModulesRequest,omitempty"`
	SupportsReadMemoryRequest          bool                          `json:"supportsReadMemoryRequest,omitempty"`
	SupportsRestartFrame               bool                          `json:"supportsRestartFrame,omitempty"`
	SupportsRestartRequest             bool                          `json:"supportsRestartRequest,omitempty"`
	SupportsSetExpression              bool                          `json:"supportsSetExpression,omitempty"`
	SupportsSetVariable                bool                          `json:"supportsSetVariable,omitempty"`
	SupportsStepBack                   bool                          `json:"supportsStepBack,omitempty"`
	SupportsStepInTargetsRequest       bool                          `json:"supportsStepInTargetsRequest,omitempty"`
	SupportsSteppingGranularity        bool                          `json:"supportsSteppingGranularity,omitempty"`
	SupportsTerminateRequest           bool                          `json:"supportsTerminateRequest,omitempty"`
	SupportsTerminateThreadsRequest    bool                          `json:"supportsTerminateThreadsRequest,omitempty"`
	SupportsValueFormattingOptions     bool                          `json:"supportsValueFormattingOptions,omitempty"`
	SupportsWriteMemoryRequest         bool                          `json:"supportsWriteMemoryRequest,omitempty"`
}

type CapabilitiesEventBody struct {
	Capabilities *Capabilities `json:"capabilities,omitempty"`
}

type CompletionItemType string

const (
	CompletionItemType_Method      CompletionItemType = "method"
	CompletionItemType_Function    CompletionItemType = "function"
	CompletionItemType_Constructor CompletionItemType = "constructor"
	CompletionItemType_Field       CompletionItemType = "field"
	CompletionItemType_Variable    CompletionItemType = "variable"
	CompletionItemType_Class       CompletionItemType = "class"
	CompletionItemType_Interface   CompletionItemType = "interface"
	CompletionItemType_Module      CompletionItemType = "module"
	CompletionItemType_Property    CompletionItemType = "property"
	CompletionItemType_Unit        CompletionItemType = "unit"
	CompletionItemType_Value       CompletionItemType = "value"
	CompletionItemType_Enum        CompletionItemType = "enum"
	CompletionItemType_Keyword     CompletionItemType = "keyword"
	CompletionItemType_Snippet     CompletionItemType = "snippet"
	CompletionItemType_Text        CompletionItemType = "text"
	CompletionItemType_Color       CompletionItemType = "color"
	CompletionItemType_File        CompletionItemType = "file"
	CompletionItemType_Reference   CompletionItemType = "reference"
	CompletionItemType_Customcolor CompletionItemType = "customcolor"
)

type CompletionItem struct {
	Label           string             `json:"label,omitempty"`
	Length          int                `json:"length,omitempty"`
	SelectionLength int                `json:"selectionLength,omitempty"`
	SelectionStart  int                `json:"selectionStart,omitempty"`
	SortText        string             `json:"sortText,omitempty"`
	Start           int                `json:"start,omitempty"`
	Text            string             `json:"text,omitempty"`
	Type            CompletionItemType `json:"type,omitempty"`
}

type CompletionsArguments struct {
	Column  int    `json:"column,omitempty"`
	FrameId int    `json:"frameId,omitempty"`
	Line    int    `json:"line,omitempty"`
	Text    string `json:"text,omitempty"`
}

type CompletionsResponseBody struct {
	Targets []*CompletionItem `json:"targets,omitempty"`
}

type ContinueArguments struct {
	ThreadId int `json:"threadId,omitempty"`
}

type ContinueResponseBody struct {
	AllThreadsContinued bool `json:"allThreadsContinued,omitempty"`
}

type ContinuedEventBody struct {
	AllThreadsContinued bool `json:"allThreadsContinued,omitempty"`
	ThreadId            int  `json:"threadId,omitempty"`
}

type DataBreakpointAccessType string

const (
	DataBreakpointAccessType_Read      DataBreakpointAccessType = "read"
	DataBreakpointAccessType_Write     DataBreakpointAccessType = "write"
	DataBreakpointAccessType_ReadWrite DataBreakpointAccessType = "readWrite"
)

type DataBreakpoint struct {
	AccessType   DataBreakpointAccessType `json:"accessType,omitempty"`
	Condition    string                   `json:"condition,omitempty"`
	DataId       string                   `json:"dataId,omitempty"`
	HitCondition string                   `json:"hitCondition,omitempty"`
}

type DataBreakpointInfoArguments struct {
	Name               string `json:"name,omitempty"`
	VariablesReference int    `json:"variablesReference,omitempty"`
}

type DataBreakpointInfoResponseBody struct {
	AccessTypes []DataBreakpointAccessType `json:"accessTypes,omitempty"`
	CanPersist  bool                       `json:"canPersist,omitempty"`
	DataId      interface{}                `json:"dataId,omitempty"`
	Description string                     `json:"description,omitempty"`
}

type DisassembleArguments struct {
	InstructionCount  int    `json:"instructionCount,omitempty"`
	InstructionOffset int    `json:"instructionOffset,omitempty"`
	MemoryReference   string `json:"memoryReference,omitempty"`
	Offset            int    `json:"offset,omitempty"`
	ResolveSymbols    bool   `json:"resolveSymbols,omitempty"`
}

type DisassembledInstruction struct {
	Address          string  `json:"address,omitempty"`
	Column           int     `json:"column,omitempty"`
	EndColumn        int     `json:"endColumn,omitempty"`
	EndLine          int     `json:"endLine,omitempty"`
	Instruction      string  `json:"instruction,omitempty"`
	InstructionBytes string  `json:"instructionBytes,omitempty"`
	Line             int     `json:"line,omitempty"`
	Location         *Source `json:"location,omitempty"`
	Symbol           string  `json:"symbol,omitempty"`
}

type DisassembleResponseBody struct {
	Instructions []*DisassembledInstruction `json:"instructions,omitempty"`
}

type DisconnectArguments struct {
	Restart           bool `json:"restart,omitempty"`
	SuspendDebuggee   bool `json:"suspendDebuggee,omitempty"`
	TerminateDebuggee bool `json:"terminateDebuggee,omitempty"`
}

type Message struct {
	Format        string            `json:"format,omitempty"`
	Id            int               `json:"id,omitempty"`
	SendTelemetry bool              `json:"sendTelemetry,omitempty"`
	ShowUser      bool              `json:"showUser,omitempty"`
	Url           string            `json:"url,omitempty"`
	UrlLabel      string            `json:"urlLabel,omitempty"`
	Variables     map[string]string `json:"variables,omitempty"`
}

type ErrorResponseBody struct {
	Error *Message `json:"error,omitempty"`
}

type ValueFormat struct {
	Hex bool `json:"hex,omitempty"`
}

type EvaluateArguments struct {
	Context    string       `json:"context,omitempty"`
	Expression string       `json:"expression,omitempty"`
	Format     *ValueFormat `json:"format,omitempty"`
	FrameId    int          `json:"frameId,omitempty"`
}

type VariablePresentationHint struct {
	Attributes []string `json:"attributes,omitempty"`
	Kind       string   `json:"kind,omitempty"`
	Visibility string   `json:"visibility,omitempty"`
}

type EvaluateResponseBody struct {
	IndexedVariables   int                       `json:"indexedVariables,omitempty"`
	MemoryReference    string                    `json:"memoryReference,omitempty"`
	NamedVariables     int                       `json:"namedVariables,omitempty"`
	PresentationHint   *VariablePresentationHint `json:"presentationHint,omitempty"`
	Result             string                    `json:"result,omitempty"`
	Type               string                    `json:"type,omitempty"`
	VariablesReference int                       `json:"variablesReference,omitempty"`
}

type ExceptionBreakMode string

const (
	ExceptionBreakMode_Never         ExceptionBreakMode = "never"
	ExceptionBreakMode_Always        ExceptionBreakMode = "always"
	ExceptionBreakMode_Unhandled     ExceptionBreakMode = "unhandled"
	ExceptionBreakMode_UserUnhandled ExceptionBreakMode = "userUnhandled"
)

type ExceptionDetails struct {
	EvaluateName   string              `json:"evaluateName,omitempty"`
	FullTypeName   string              `json:"fullTypeName,omitempty"`
	InnerException []*ExceptionDetails `json:"innerException,omitempty"`
	Message        string              `json:"message,omitempty"`
	StackTrace     string              `json:"stackTrace,omitempty"`
	TypeName       string              `json:"typeName,omitempty"`
}

type ExceptionFilterOptions struct {
	Condition string `json:"condition,omitempty"`
	FilterId  string `json:"filterId,omitempty"`
}

type ExceptionInfoArguments struct {
	ThreadId int `json:"threadId,omitempty"`
}

type ExceptionInfoResponseBody struct {
	BreakMode   ExceptionBreakMode `json:"breakMode,omitempty"`
	Description string             `json:"description,omitempty"`
	Details     *ExceptionDetails  `json:"details,omitempty"`
	ExceptionId string             `json:"exceptionId,omitempty"`
}

type ExceptionPathSegment struct {
	Names  []string `json:"names,omitempty"`
	Negate bool     `json:"negate,omitempty"`
}

type ExceptionOptions struct {
	BreakMode ExceptionBreakMode      `json:"breakMode,omitempty"`
	Path      []*ExceptionPathSegment `json:"path,omitempty"`
}

type ExitedEventBody struct {
	ExitCode int `json:"exitCode,omitempty"`
}

type FunctionBreakpoint struct {
	Condition    string `json:"condition,omitempty"`
	HitCondition string `json:"hitCondition,omitempty"`
	Name         string `json:"name,omitempty"`
}

type GotoArguments struct {
	TargetId int `json:"targetId,omitempty"`
	ThreadId int `json:"threadId,omitempty"`
}

type GotoTarget struct {
	Column                      int    `json:"column,omitempty"`
	EndColumn                   int    `json:"endColumn,omitempty"`
	EndLine                     int    `json:"endLine,omitempty"`
	Id                          int    `json:"id,omitempty"`
	InstructionPointerReference string `json:"instructionPointerReference,omitempty"`
	Label                       string `json:"label,omitempty"`
	Line                        int    `json:"line,omitempty"`
}

type GotoTargetsArguments struct {
	Column int     `json:"column,omitempty"`
	Line   int     `json:"line,omitempty"`
	Source *Source `json:"source,omitempty"`
}

type GotoTargetsResponseBody struct {
	Targets []*GotoTarget `json:"targets,omitempty"`
}

type InitializeRequestArguments struct {
	AdapterID                    string `json:"adapterID,omitempty"`
	ClientID                     string `json:"clientID,omitempty"`
	ClientName                   string `json:"clientName,omitempty"`
	ColumnsStartAt1              bool   `json:"columnsStartAt1,omitempty"`
	LinesStartAt1                bool   `json:"linesStartAt1,omitempty"`
	Locale                       string `json:"locale,omitempty"`
	PathFormat                   string `json:"pathFormat,omitempty"`
	SupportsInvalidatedEvent     bool   `json:"supportsInvalidatedEvent,omitempty"`
	SupportsMemoryReferences     bool   `json:"supportsMemoryReferences,omitempty"`
	SupportsProgressReporting    bool   `json:"supportsProgressReporting,omitempty"`
	SupportsRunInTerminalRequest bool   `json:"supportsRunInTerminalRequest,omitempty"`
	SupportsVariablePaging       bool   `json:"supportsVariablePaging,omitempty"`
	SupportsVariableType         bool   `json:"supportsVariableType,omitempty"`
}

type InstructionBreakpoint struct {
	Condition            string `json:"condition,omitempty"`
	HitCondition         string `json:"hitCondition,omitempty"`
	InstructionReference string `json:"instructionReference,omitempty"`
	Offset               int    `json:"offset,omitempty"`
}

type InvalidatedEventBody struct {
	Areas        []string `json:"areas,omitempty"`
	StackFrameId int      `json:"stackFrameId,omitempty"`
	ThreadId     int      `json:"threadId,omitempty"`
}

type LaunchRequestArguments struct {
	NoDebug bool        `json:"noDebug,omitempty"`
	Restart interface{} `json:"__restart,omitempty"`
}

type LoadedSourceEventBodyReason string

const (
	LoadedSourceEventBodyReason_New     LoadedSourceEventBodyReason = "new"
	LoadedSourceEventBodyReason_Changed LoadedSourceEventBodyReason = "changed"
	LoadedSourceEventBodyReason_Removed LoadedSourceEventBodyReason = "removed"
)

type LoadedSourceEventBody struct {
	Reason LoadedSourceEventBodyReason `json:"reason,omitempty"`
	Source *Source                     `json:"source,omitempty"`
}

type LoadedSourcesResponseBody struct {
	Sources []*Source `json:"sources,omitempty"`
}

type Module struct {
	AddressRange   string      `json:"addressRange,omitempty"`
	DateTimeStamp  string      `json:"dateTimeStamp,omitempty"`
	Id             interface{} `json:"id,omitempty"`
	IsOptimized    bool        `json:"isOptimized,omitempty"`
	IsUserCode     bool        `json:"isUserCode,omitempty"`
	Name           string      `json:"name,omitempty"`
	Path           string      `json:"path,omitempty"`
	SymbolFilePath string      `json:"symbolFilePath,omitempty"`
	SymbolStatus   string      `json:"symbolStatus,omitempty"`
	Version        string      `json:"version,omitempty"`
}

type ModuleEventBodyReason string

const (
	ModuleEventBodyReason_New     ModuleEventBodyReason = "new"
	ModuleEventBodyReason_Changed ModuleEventBodyReason = "changed"
	ModuleEventBodyReason_Removed ModuleEventBodyReason = "removed"
)

type ModuleEventBody struct {
	Module *Module               `json:"module,omitempty"`
	Reason ModuleEventBodyReason `json:"reason,omitempty"`
}

type ModulesArguments struct {
	ModuleCount int `json:"moduleCount,omitempty"`
	StartModule int `json:"startModule,omitempty"`
}

type ModulesResponseBody struct {
	Modules      []*Module `json:"modules,omitempty"`
	TotalModules int       `json:"totalModules,omitempty"`
}

type ModulesViewDescriptor struct {
	Columns []*ColumnDescriptor `json:"columns,omitempty"`
}

type SteppingGranularity string

const (
	SteppingGranularity_Statement   SteppingGranularity = "statement"
	SteppingGranularity_Line        SteppingGranularity = "line"
	SteppingGranularity_Instruction SteppingGranularity = "instruction"
)

type NextArguments struct {
	Granularity SteppingGranularity `json:"granularity,omitempty"`
	ThreadId    int                 `json:"threadId,omitempty"`
}

type OutputEventBodyGroup string

const (
	OutputEventBodyGroup_Start          OutputEventBodyGroup = "start"
	OutputEventBodyGroup_StartCollapsed OutputEventBodyGroup = "startCollapsed"
	OutputEventBodyGroup_End            OutputEventBodyGroup = "end"
)

type OutputEventBody struct {
	Category           string               `json:"category,omitempty"`
	Column             int                  `json:"column,omitempty"`
	Data               interface{}          `json:"data,omitempty"`
	Group              OutputEventBodyGroup `json:"group,omitempty"`
	Line               int                  `json:"line,omitempty"`
	Output             string               `json:"output,omitempty"`
	Source             *Source              `json:"source,omitempty"`
	VariablesReference int                  `json:"variablesReference,omitempty"`
}

type PauseArguments struct {
	ThreadId int `json:"threadId,omitempty"`
}

type ProcessEventBodyStartMethod string

const (
	ProcessEventBodyStartMethod_Launch                   ProcessEventBodyStartMethod = "launch"
	ProcessEventBodyStartMethod_Attach                   ProcessEventBodyStartMethod = "attach"
	ProcessEventBodyStartMethod_AttachForSuspendedLaunch ProcessEventBodyStartMethod = "attachForSuspendedLaunch"
)

type ProcessEventBody struct {
	IsLocalProcess  bool                        `json:"isLocalProcess,omitempty"`
	Name            string                      `json:"name,omitempty"`
	PointerSize     int                         `json:"pointerSize,omitempty"`
	StartMethod     ProcessEventBodyStartMethod `json:"startMethod,omitempty"`
	SystemProcessId int                         `json:"systemProcessId,omitempty"`
}

type ProgressEndEventBody struct {
	Message    string `json:"message,omitempty"`
	ProgressId string `json:"progressId,omitempty"`
}

type ProgressStartEventBody struct {
	Cancellable bool    `json:"cancellable,omitempty"`
	Message     string  `json:"message,omitempty"`
	Percentage  float64 `json:"percentage,omitempty"`
	ProgressId  string  `json:"progressId,omitempty"`
	RequestId   int     `json:"requestId,omitempty"`
	Title       string  `json:"title,omitempty"`
}

type ProgressUpdateEventBody struct {
	Message    string  `json:"message,omitempty"`
	Percentage float64 `json:"percentage,omitempty"`
	ProgressId string  `json:"progressId,omitempty"`
}

type ReadMemoryArguments struct {
	Count           int    `json:"count,omitempty"`
	MemoryReference string `json:"memoryReference,omitempty"`
	Offset          int    `json:"offset,omitempty"`
}

type ReadMemoryResponseBody struct {
	Address         string `json:"address,omitempty"`
	Data            string `json:"data,omitempty"`
	UnreadableBytes int    `json:"unreadableBytes,omitempty"`
}

type RestartArguments struct {
	Arguments interface{} `json:"arguments,omitempty"`
}

type RestartFrameArguments struct {
	FrameId int `json:"frameId,omitempty"`
}

type ReverseContinueArguments struct {
	ThreadId int `json:"threadId,omitempty"`
}

type RunInTerminalRequestArgumentsKind string

const (
	RunInTerminalRequestArgumentsKind_Integrated RunInTerminalRequestArgumentsKind = "integrated"
	RunInTerminalRequestArgumentsKind_External   RunInTerminalRequestArgumentsKind = "external"
)

type RunInTerminalRequestArguments struct {
	Args  []string                          `json:"args,omitempty"`
	Cwd   string                            `json:"cwd,omitempty"`
	Env   map[string]interface{}            `json:"env,omitempty"`
	Kind  RunInTerminalRequestArgumentsKind `json:"kind,omitempty"`
	Title string                            `json:"title,omitempty"`
}

type RunInTerminalResponseBody struct {
	ProcessId      int `json:"processId,omitempty"`
	ShellProcessId int `json:"shellProcessId,omitempty"`
}

type Scope struct {
	Column             int     `json:"column,omitempty"`
	EndColumn          int     `json:"endColumn,omitempty"`
	EndLine            int     `json:"endLine,omitempty"`
	Expensive          bool    `json:"expensive,omitempty"`
	IndexedVariables   int     `json:"indexedVariables,omitempty"`
	Line               int     `json:"line,omitempty"`
	Name               string  `json:"name,omitempty"`
	NamedVariables     int     `json:"namedVariables,omitempty"`
	PresentationHint   string  `json:"presentationHint,omitempty"`
	Source             *Source `json:"source,omitempty"`
	VariablesReference int     `json:"variablesReference,omitempty"`
}

type ScopesArguments struct {
	FrameId int `json:"frameId,omitempty"`
}

type ScopesResponseBody struct {
	Scopes []*Scope `json:"scopes,omitempty"`
}

type SourceBreakpoint struct {
	Column       int    `json:"column,omitempty"`
	Condition    string `json:"condition,omitempty"`
	HitCondition string `json:"hitCondition,omitempty"`
	Line         int    `json:"line,omitempty"`
	LogMessage   string `json:"logMessage,omitempty"`
}

type SetBreakpointsArguments struct {
	Breakpoints    []*SourceBreakpoint `json:"breakpoints,omitempty"`
	Lines          []int               `json:"lines,omitempty"`
	Source         *Source             `json:"source,omitempty"`
	SourceModified bool                `json:"sourceModified,omitempty"`
}

type SetBreakpointsResponseBody struct {
	Breakpoints []*Breakpoint `json:"breakpoints,omitempty"`
}

type SetDataBreakpointsArguments struct {
	Breakpoints []*DataBreakpoint `json:"breakpoints,omitempty"`
}

type SetDataBreakpointsResponseBody struct {
	Breakpoints []*Breakpoint `json:"breakpoints,omitempty"`
}

type SetExceptionBreakpointsArguments struct {
	ExceptionOptions []*ExceptionOptions       `json:"exceptionOptions,omitempty"`
	FilterOptions    []*ExceptionFilterOptions `json:"filterOptions,omitempty"`
	Filters          []string                  `json:"filters,omitempty"`
}

type SetExpressionArguments struct {
	Expression string       `json:"expression,omitempty"`
	Format     *ValueFormat `json:"format,omitempty"`
	FrameId    int          `json:"frameId,omitempty"`
	Value      string       `json:"value,omitempty"`
}

type SetExpressionResponseBody struct {
	IndexedVariables   int                       `json:"indexedVariables,omitempty"`
	NamedVariables     int                       `json:"namedVariables,omitempty"`
	PresentationHint   *VariablePresentationHint `json:"presentationHint,omitempty"`
	Type               string                    `json:"type,omitempty"`
	Value              string                    `json:"value,omitempty"`
	VariablesReference int                       `json:"variablesReference,omitempty"`
}

type SetFunctionBreakpointsArguments struct {
	Breakpoints []*FunctionBreakpoint `json:"breakpoints,omitempty"`
}

type SetFunctionBreakpointsResponseBody struct {
	Breakpoints []*Breakpoint `json:"breakpoints,omitempty"`
}

type SetInstructionBreakpointsArguments struct {
	Breakpoints []*InstructionBreakpoint `json:"breakpoints,omitempty"`
}

type SetInstructionBreakpointsResponseBody struct {
	Breakpoints []*Breakpoint `json:"breakpoints,omitempty"`
}

type SetVariableArguments struct {
	Format             *ValueFormat `json:"format,omitempty"`
	Name               string       `json:"name,omitempty"`
	Value              string       `json:"value,omitempty"`
	VariablesReference int          `json:"variablesReference,omitempty"`
}

type SetVariableResponseBody struct {
	IndexedVariables   int    `json:"indexedVariables,omitempty"`
	NamedVariables     int    `json:"namedVariables,omitempty"`
	Type               string `json:"type,omitempty"`
	Value              string `json:"value,omitempty"`
	VariablesReference int    `json:"variablesReference,omitempty"`
}

type SourceArguments struct {
	Source          *Source `json:"source,omitempty"`
	SourceReference int     `json:"sourceReference,omitempty"`
}

type SourceResponseBody struct {
	Content  string `json:"content,omitempty"`
	MimeType string `json:"mimeType,omitempty"`
}

type StackFramePresentationHint string

const (
	StackFramePresentationHint_Normal StackFramePresentationHint = "normal"
	StackFramePresentationHint_Label  StackFramePresentationHint = "label"
	StackFramePresentationHint_Subtle StackFramePresentationHint = "subtle"
)

type StackFrame struct {
	CanRestart                  bool                       `json:"canRestart,omitempty"`
	Column                      int                        `json:"column,omitempty"`
	EndColumn                   int                        `json:"endColumn,omitempty"`
	EndLine                     int                        `json:"endLine,omitempty"`
	Id                          int                        `json:"id,omitempty"`
	InstructionPointerReference string                     `json:"instructionPointerReference,omitempty"`
	Line                        int                        `json:"line,omitempty"`
	ModuleId                    interface{}                `json:"moduleId,omitempty"`
	Name                        string                     `json:"name,omitempty"`
	PresentationHint            StackFramePresentationHint `json:"presentationHint,omitempty"`
	Source                      *Source                    `json:"source,omitempty"`
}

type StackFrameFormat struct {
	ValueFormat
	IncludeAll      bool `json:"includeAll,omitempty"`
	Line            bool `json:"line,omitempty"`
	Module          bool `json:"module,omitempty"`
	ParameterNames  bool `json:"parameterNames,omitempty"`
	ParameterTypes  bool `json:"parameterTypes,omitempty"`
	ParameterValues bool `json:"parameterValues,omitempty"`
	Parameters      bool `json:"parameters,omitempty"`
}

type StackTraceArguments struct {
	Format     *StackFrameFormat `json:"format,omitempty"`
	Levels     int               `json:"levels,omitempty"`
	StartFrame int               `json:"startFrame,omitempty"`
	ThreadId   int               `json:"threadId,omitempty"`
}

type StackTraceResponseBody struct {
	StackFrames []*StackFrame `json:"stackFrames,omitempty"`
	TotalFrames int           `json:"totalFrames,omitempty"`
}

type StepBackArguments struct {
	Granularity SteppingGranularity `json:"granularity,omitempty"`
	ThreadId    int                 `json:"threadId,omitempty"`
}

type StepInArguments struct {
	Granularity SteppingGranularity `json:"granularity,omitempty"`
	TargetId    int                 `json:"targetId,omitempty"`
	ThreadId    int                 `json:"threadId,omitempty"`
}

type StepInTarget struct {
	Id    int    `json:"id,omitempty"`
	Label string `json:"label,omitempty"`
}

type StepInTargetsArguments struct {
	FrameId int `json:"frameId,omitempty"`
}

type StepInTargetsResponseBody struct {
	Targets []*StepInTarget `json:"targets,omitempty"`
}

type StepOutArguments struct {
	Granularity SteppingGranularity `json:"granularity,omitempty"`
	ThreadId    int                 `json:"threadId,omitempty"`
}

type StoppedEventBody struct {
	AllThreadsStopped bool   `json:"allThreadsStopped,omitempty"`
	Description       string `json:"description,omitempty"`
	HitBreakpointIds  []int  `json:"hitBreakpointIds,omitempty"`
	PreserveFocusHint bool   `json:"preserveFocusHint,omitempty"`
	Reason            string `json:"reason,omitempty"`
	Text              string `json:"text,omitempty"`
	ThreadId          int    `json:"threadId,omitempty"`
}

type TerminateArguments struct {
	Restart bool `json:"restart,omitempty"`
}

type TerminateThreadsArguments struct {
	ThreadIds []int `json:"threadIds,omitempty"`
}

type TerminatedEventBody struct {
	Restart interface{} `json:"restart,omitempty"`
}

type Thread struct {
	Id   int    `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
}

type ThreadEventBody struct {
	Reason   string `json:"reason,omitempty"`
	ThreadId int    `json:"threadId,omitempty"`
}

type ThreadsResponseBody struct {
	Threads []*Thread `json:"threads,omitempty"`
}

type Variable struct {
	EvaluateName       string                    `json:"evaluateName,omitempty"`
	IndexedVariables   int                       `json:"indexedVariables,omitempty"`
	MemoryReference    string                    `json:"memoryReference,omitempty"`
	Name               string                    `json:"name,omitempty"`
	NamedVariables     int                       `json:"namedVariables,omitempty"`
	PresentationHint   *VariablePresentationHint `json:"presentationHint,omitempty"`
	Type               string                    `json:"type,omitempty"`
	Value              string                    `json:"value,omitempty"`
	VariablesReference int                       `json:"variablesReference,omitempty"`
}

type VariablesArgumentsFilter string

const (
	VariablesArgumentsFilter_Indexed VariablesArgumentsFilter = "indexed"
	VariablesArgumentsFilter_Named   VariablesArgumentsFilter = "named"
)

type VariablesArguments struct {
	Count              int                      `json:"count,omitempty"`
	Filter             VariablesArgumentsFilter `json:"filter,omitempty"`
	Format             *ValueFormat             `json:"format,omitempty"`
	Start              int                      `json:"start,omitempty"`
	VariablesReference int                      `json:"variablesReference,omitempty"`
}

type VariablesResponseBody struct {
	Variables []*Variable `json:"variables,omitempty"`
}

type WriteMemoryArguments struct {
	AllowPartial    bool   `json:"allowPartial,omitempty"`
	Data            string `json:"data,omitempty"`
	MemoryReference string `json:"memoryReference,omitempty"`
	Offset          int    `json:"offset,omitempty"`
}
